/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: RobotState.idl
  Source: RobotState.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_ROBOTSTATE_HPP
#define DDSCXX_ROBOTSTATE_HPP

#include "JointState.hpp"

#include <cstdint>
#include <array>

namespace qi
{
class RobotState
{
private:
 std::array<::qi::JointState, 12> joints_ = { };
 uint64_t timestamp_ = 0;
 uint32_t mode_ = 0;

public:
  RobotState() = default;

  explicit RobotState(
    const std::array<::qi::JointState, 12>& joints,
    uint64_t timestamp,
    uint32_t mode) :
    joints_(joints),
    timestamp_(timestamp),
    mode_(mode) { }

  const std::array<::qi::JointState, 12>& joints() const { return this->joints_; }
  std::array<::qi::JointState, 12>& joints() { return this->joints_; }
  void joints(const std::array<::qi::JointState, 12>& _val_) { this->joints_ = _val_; }
  void joints(std::array<::qi::JointState, 12>&& _val_) { this->joints_ = _val_; }
  uint64_t timestamp() const { return this->timestamp_; }
  uint64_t& timestamp() { return this->timestamp_; }
  void timestamp(uint64_t _val_) { this->timestamp_ = _val_; }
  uint32_t mode() const { return this->mode_; }
  uint32_t& mode() { return this->mode_; }
  void mode(uint32_t _val_) { this->mode_ = _val_; }

  bool operator==(const RobotState& _other) const
  {
    (void) _other;
    return joints_ == _other.joints_ &&
      timestamp_ == _other.timestamp_ &&
      mode_ == _other.mode_;
  }

  bool operator!=(const RobotState& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::qi::RobotState>::getTypeName()
{
  return "qi::RobotState";
}

template <> constexpr bool TopicTraits<::qi::RobotState>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::qi::RobotState>::type_map_blob_sz() { return 640; }
template<> constexpr unsigned int TopicTraits<::qi::RobotState>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::qi::RobotState>::type_map_blob() {
  static const uint8_t blob[] = {
 0xdb,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0x75,  0x5b,  0xda,  0x91,  0xfb,  0x24,  0x8a, 
 0x8e,  0xbe,  0x26,  0xf0,  0x0a,  0xa0,  0x59,  0x00,  0x5b,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x4b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf1,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0c,  0xf1,  0x6c,  0xad,  0xba,  0xf8,  0xf6,  0x6b,  0x38,  0xd1,  0x31,  0x70, 
 0x4b,  0x80,  0x91,  0x84,  0xd9,  0x7d,  0xcf,  0xfd,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x08,  0xd7,  0xe6,  0xd5,  0x5b,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x15,  0xd6,  0x17,  0x12,  0xf1,  0x6c,  0xad,  0xba,  0xf8,  0xf6,  0x6b,  0x38,  0xd1, 
 0x31,  0x70,  0x4b,  0x80,  0x91,  0x84,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x47,  0x57,  0xfe,  0x07,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xac,  0x1a,  0x45,  0x3d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xe9,  0xee,  0x26,  0x51,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xee,  0xf4,  0x38,  0xf7,  0x00, 
 0x56,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x07,  0x80,  0x8f,  0xa2,  0x30,  0x8a,  0xfb, 
 0x92,  0x57,  0x03,  0xad,  0xa6,  0x98,  0xec,  0x00,  0x8f,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x71,  0x69,  0x3a,  0x3a, 
 0x52,  0x6f,  0x62,  0x6f,  0x74,  0x53,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x6b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x2d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf2, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0c,  0xf2,  0xc6,  0x97,  0x3e,  0x8e,  0x0f,  0x7d, 
 0x8d,  0x38,  0x37,  0x94,  0xa6,  0xc3,  0x0b,  0x3f,  0x07,  0x00,  0x00,  0x00,  0x6a,  0x6f,  0x69,  0x6e, 
 0x74,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x08,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d, 
 0x70,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x64,  0x65,  0x00,  0x00,  0x00,  0xf2,  0xc6,  0x97,  0x3e,  0x8e, 
 0x0f,  0x7d,  0x8d,  0x38,  0x37,  0x94,  0xa6,  0xc3,  0x0b,  0x3f,  0x00,  0x00,  0x9a,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00, 
 0x71,  0x69,  0x3a,  0x3a,  0x4a,  0x6f,  0x69,  0x6e,  0x74,  0x53,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00, 
 0x76,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x09,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x76,  0x65,  0x6c,  0x6f,  0x63,  0x69,  0x74,  0x79,  0x00,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x74,  0x6f,  0x72,  0x71,  0x75,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70, 
 0x65,  0x72,  0x61,  0x74,  0x75,  0x72,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0xf2,  0x07,  0x80,  0x8f,  0xa2,  0x30,  0x8a,  0xfb,  0x92,  0x57,  0x03,  0xad, 
 0xa6,  0x98,  0xec,  0xf1,  0x75,  0x5b,  0xda,  0x91,  0xfb,  0x24,  0x8a,  0x8e,  0xbe,  0x26,  0xf0,  0x0a, 
 0xa0,  0x59,  0xf2,  0xc6,  0x97,  0x3e,  0x8e,  0x0f,  0x7d,  0x8d,  0x38,  0x37,  0x94,  0xa6,  0xc3,  0x0b, 
 0x3f,  0xf1,  0x6c,  0xad,  0xba,  0xf8,  0xf6,  0x6b,  0x38,  0xd1,  0x31,  0x70,  0x4b,  0x80,  0x91,  0x84, 
};
  return blob;
}
template<> inline const uint8_t * TopicTraits<::qi::RobotState>::type_info_blob() {
  static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x75,  0x5b,  0xda,  0x91,  0xfb,  0x24,  0x8a,  0x8e,  0xbe,  0x26,  0xf0, 
 0x0a,  0xa0,  0x59,  0x00,  0x5f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x6c,  0xad,  0xba,  0xf8,  0xf6,  0x6b,  0x38, 
 0xd1,  0x31,  0x70,  0x4b,  0x80,  0x91,  0x84,  0x00,  0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x07,  0x80,  0x8f, 
 0xa2,  0x30,  0x8a,  0xfb,  0x92,  0x57,  0x03,  0xad,  0xa6,  0x98,  0xec,  0x00,  0x93,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xc6,  0x97,  0x3e,  0x8e,  0x0f,  0x7d,  0x8d,  0x38,  0x37,  0x94,  0xa6,  0xc3,  0x0b,  0x3f,  0x00, 
 0x9e,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::qi::RobotState>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::qi::RobotState>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::qi::RobotState)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::qi::RobotState>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::qi::RobotState& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.joints()) {  //array depth 1
      if (!write(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::qi::RobotState& instance, bool as_key) {
  auto &props = get_type_props<::qi::RobotState>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::qi::RobotState& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (auto & a_1:instance.joints()) {  //array depth 1
      if (!read(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::qi::RobotState& instance, bool as_key) {
  auto &props = get_type_props<::qi::RobotState>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::qi::RobotState& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.joints()) {  //array depth 1
      if (!move(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::qi::RobotState& instance, bool as_key) {
  auto &props = get_type_props<::qi::RobotState>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::qi::RobotState& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.joints()) {  //array depth 1
      if (!max(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::qi::RobotState& instance, bool as_key) {
  auto &props = get_type_props<::qi::RobotState>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_ROBOTSTATE_HPP
