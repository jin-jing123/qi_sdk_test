/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: RobotCmd.idl
  Source: RobotCmd.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_ROBOTCMD_HPP
#define DDSCXX_ROBOTCMD_HPP

#include "JointCmd.hpp"

#include <cstdint>
#include <array>

namespace qi
{
class RobotCmd
{
private:
 std::array<::qi::JointCmd, 12> joints_ = { };
 uint32_t mode_ = 0;

public:
  RobotCmd() = default;

  explicit RobotCmd(
    const std::array<::qi::JointCmd, 12>& joints,
    uint32_t mode) :
    joints_(joints),
    mode_(mode) { }

  const std::array<::qi::JointCmd, 12>& joints() const { return this->joints_; }
  std::array<::qi::JointCmd, 12>& joints() { return this->joints_; }
  void joints(const std::array<::qi::JointCmd, 12>& _val_) { this->joints_ = _val_; }
  void joints(std::array<::qi::JointCmd, 12>&& _val_) { this->joints_ = _val_; }
  uint32_t mode() const { return this->mode_; }
  uint32_t& mode() { return this->mode_; }
  void mode(uint32_t _val_) { this->mode_ = _val_; }

  bool operator==(const RobotCmd& _other) const
  {
    (void) _other;
    return joints_ == _other.joints_ &&
      mode_ == _other.mode_;
  }

  bool operator!=(const RobotCmd& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::qi::RobotCmd>::getTypeName()
{
  return "qi::RobotCmd";
}

template <> constexpr bool TopicTraits<::qi::RobotCmd>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::qi::RobotCmd>::type_map_blob_sz() { return 628; }
template<> constexpr unsigned int TopicTraits<::qi::RobotCmd>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::qi::RobotCmd>::type_map_blob() {
  static const uint8_t blob[] = {
 0xdb,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0xdc,  0xc4,  0x6f,  0x50,  0x1b,  0x6e,  0x8c, 
 0x28,  0x5e,  0xa6,  0xae,  0x74,  0x55,  0xc3,  0x00,  0x4b,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x3b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf1,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0c,  0xf1,  0x54,  0x75,  0x46,  0x92,  0xe3,  0xd4,  0x67,  0x95,  0xd8,  0xf4, 
 0xea,  0x68,  0xc9,  0x88,  0xd9,  0x7d,  0xcf,  0xfd,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x15,  0xd6,  0x17,  0x12,  0xf1,  0x54,  0x75,  0x46,  0x92,  0xe3,  0xd4,  0x67,  0x95, 
 0xd8,  0xf4,  0xea,  0x68,  0xc9,  0x88,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x47,  0x57,  0xfe,  0x07,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xac,  0x1a,  0x45,  0x3d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x26,  0xb5,  0x68,  0xe4,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x87,  0x22,  0x16,  0x52,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xe9,  0xee,  0x26,  0x51,  0x00, 
 0x49,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x17,  0xe7,  0x7e,  0x8b,  0x3d,  0x95,  0x78, 
 0x20,  0x7b,  0xcf,  0x61,  0xe0,  0xa3,  0x3c,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x71,  0x69,  0x3a,  0x3a, 
 0x52,  0x6f,  0x62,  0x6f,  0x74,  0x43,  0x6d,  0x64,  0x00,  0x00,  0x00,  0x00,  0x4f,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x2d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf2, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0c,  0xf2,  0x89,  0x39,  0x43,  0x81,  0x85,  0x7c, 
 0xc0,  0x8b,  0xa7,  0xce,  0xa3,  0x6e,  0x36,  0xc3,  0x07,  0x00,  0x00,  0x00,  0x6a,  0x6f,  0x69,  0x6e, 
 0x74,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x05,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x64,  0x65,  0x00,  0x00,  0x00,  0xf2, 
 0x89,  0x39,  0x43,  0x81,  0x85,  0x7c,  0xc0,  0x8b,  0xa7,  0xce,  0xa3,  0x6e,  0x36,  0xc3,  0x00,  0x00, 
 0xa9,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x0d,  0x00,  0x00,  0x00,  0x71,  0x69,  0x3a,  0x3a,  0x4a,  0x6f,  0x69,  0x6e,  0x74,  0x43,  0x6d,  0x64, 
 0x00,  0x00,  0x00,  0x00,  0x85,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x09,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x69, 
 0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x09,  0x00,  0x00,  0x00,  0x76,  0x65,  0x6c,  0x6f,  0x63,  0x69,  0x74,  0x79, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x6b,  0x70,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6b,  0x64,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x74,  0x6f,  0x72,  0x71,  0x75,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x17,  0xe7,  0x7e,  0x8b,  0x3d,  0x95,  0x78, 
 0x20,  0x7b,  0xcf,  0x61,  0xe0,  0xa3,  0x3c,  0xf1,  0xdc,  0xc4,  0x6f,  0x50,  0x1b,  0x6e,  0x8c,  0x28, 
 0x5e,  0xa6,  0xae,  0x74,  0x55,  0xc3,  0xf2,  0x89,  0x39,  0x43,  0x81,  0x85,  0x7c,  0xc0,  0x8b,  0xa7, 
 0xce,  0xa3,  0x6e,  0x36,  0xc3,  0xf1,  0x54,  0x75,  0x46,  0x92,  0xe3,  0xd4,  0x67,  0x95,  0xd8,  0xf4, 
 0xea,  0x68,  0xc9,  0x88, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::qi::RobotCmd>::type_info_blob() {
  static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xdc,  0xc4,  0x6f,  0x50,  0x1b,  0x6e,  0x8c,  0x28,  0x5e,  0xa6,  0xae, 
 0x74,  0x55,  0xc3,  0x00,  0x4f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x54,  0x75,  0x46,  0x92,  0xe3,  0xd4,  0x67, 
 0x95,  0xd8,  0xf4,  0xea,  0x68,  0xc9,  0x88,  0x00,  0x67,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x17,  0xe7,  0x7e, 
 0x8b,  0x3d,  0x95,  0x78,  0x20,  0x7b,  0xcf,  0x61,  0xe0,  0xa3,  0x3c,  0x00,  0x77,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x89,  0x39,  0x43,  0x81,  0x85,  0x7c,  0xc0,  0x8b,  0xa7,  0xce,  0xa3,  0x6e,  0x36,  0xc3,  0x00, 
 0xad,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::qi::RobotCmd>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::qi::RobotCmd>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::qi::RobotCmd)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::qi::RobotCmd>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::qi::RobotCmd& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.joints()) {  //array depth 1
      if (!write(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::qi::RobotCmd& instance, bool as_key) {
  auto &props = get_type_props<::qi::RobotCmd>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::qi::RobotCmd& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (auto & a_1:instance.joints()) {  //array depth 1
      if (!read(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::qi::RobotCmd& instance, bool as_key) {
  auto &props = get_type_props<::qi::RobotCmd>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::qi::RobotCmd& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.joints()) {  //array depth 1
      if (!move(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::qi::RobotCmd& instance, bool as_key) {
  auto &props = get_type_props<::qi::RobotCmd>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::qi::RobotCmd& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.joints()) {  //array depth 1
      if (!max(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::qi::RobotCmd& instance, bool as_key) {
  auto &props = get_type_props<::qi::RobotCmd>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_ROBOTCMD_HPP
