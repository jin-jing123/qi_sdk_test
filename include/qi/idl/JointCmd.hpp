/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: JointCmd.idl
  Source: JointCmd.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_JOINTCMD_HPP
#define DDSCXX_JOINTCMD_HPP


namespace qi
{
class JointCmd
{
private:
 float position_ = 0.0f;
 float velocity_ = 0.0f;
 float kp_ = 0.0f;
 float kd_ = 0.0f;
 float torque_ = 0.0f;

public:
  JointCmd() = default;

  explicit JointCmd(
    float position,
    float velocity,
    float kp,
    float kd,
    float torque) :
    position_(position),
    velocity_(velocity),
    kp_(kp),
    kd_(kd),
    torque_(torque) { }

  float position() const { return this->position_; }
  float& position() { return this->position_; }
  void position(float _val_) { this->position_ = _val_; }
  float velocity() const { return this->velocity_; }
  float& velocity() { return this->velocity_; }
  void velocity(float _val_) { this->velocity_ = _val_; }
  float kp() const { return this->kp_; }
  float& kp() { return this->kp_; }
  void kp(float _val_) { this->kp_ = _val_; }
  float kd() const { return this->kd_; }
  float& kd() { return this->kd_; }
  void kd(float _val_) { this->kd_ = _val_; }
  float torque() const { return this->torque_; }
  float& torque() { return this->torque_; }
  void torque(float _val_) { this->torque_ = _val_; }

  bool operator==(const JointCmd& _other) const
  {
    (void) _other;
    return position_ == _other.position_ &&
      velocity_ == _other.velocity_ &&
      kp_ == _other.kp_ &&
      kd_ == _other.kd_ &&
      torque_ == _other.torque_;
  }

  bool operator!=(const JointCmd& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::qi::JointCmd>::getTypeName()
{
  return "qi::JointCmd";
}

template <> constexpr bool TopicTraits<::qi::JointCmd>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::qi::JointCmd>::type_map_blob_sz() { return 366; }
template<> constexpr unsigned int TopicTraits<::qi::JointCmd>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::qi::JointCmd>::type_map_blob() {
  static const uint8_t blob[] = {
 0x7b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x54,  0x75,  0x46,  0x92,  0xe3,  0xd4,  0x67, 
 0x95,  0xd8,  0xf4,  0xea,  0x68,  0xc9,  0x88,  0x00,  0x63,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x47,  0x57,  0xfe,  0x07,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xac,  0x1a,  0x45,  0x3d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x26,  0xb5,  0x68,  0xe4,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x87,  0x22,  0x16,  0x52,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xe9,  0xee,  0x26,  0x51,  0x00, 
 0xc1,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x89,  0x39,  0x43,  0x81,  0x85,  0x7c,  0xc0, 
 0x8b,  0xa7,  0xce,  0xa3,  0x6e,  0x36,  0xc3,  0x00,  0xa9,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x71,  0x69,  0x3a,  0x3a, 
 0x4a,  0x6f,  0x69,  0x6e,  0x74,  0x43,  0x6d,  0x64,  0x00,  0x00,  0x00,  0x00,  0x85,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x76,  0x65,  0x6c,  0x6f,  0x63,  0x69,  0x74,  0x79,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6b,  0x70,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x6b,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x07,  0x00,  0x00,  0x00,  0x74,  0x6f,  0x72,  0x71, 
 0x75,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x89,  0x39,  0x43,  0x81,  0x85,  0x7c,  0xc0,  0x8b,  0xa7,  0xce,  0xa3,  0x6e,  0x36,  0xc3,  0xf1, 
 0x54,  0x75,  0x46,  0x92,  0xe3,  0xd4,  0x67,  0x95,  0xd8,  0xf4,  0xea,  0x68,  0xc9,  0x88, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::qi::JointCmd>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x54,  0x75,  0x46,  0x92,  0xe3,  0xd4,  0x67,  0x95,  0xd8,  0xf4,  0xea, 
 0x68,  0xc9,  0x88,  0x00,  0x67,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x89,  0x39,  0x43,  0x81,  0x85,  0x7c,  0xc0,  0x8b,  0xa7,  0xce,  0xa3, 
 0x6e,  0x36,  0xc3,  0x00,  0xad,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::qi::JointCmd>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::qi::JointCmd>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::qi::JointCmd)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::qi::JointCmd>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::qi::JointCmd& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.position()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.velocity()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.kp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.kd()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.torque()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::qi::JointCmd& instance, bool as_key) {
  auto &props = get_type_props<::qi::JointCmd>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::qi::JointCmd& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.position()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.velocity()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.kp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.kd()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.torque()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::qi::JointCmd& instance, bool as_key) {
  auto &props = get_type_props<::qi::JointCmd>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::qi::JointCmd& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.position()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.velocity()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.kp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.kd()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.torque()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::qi::JointCmd& instance, bool as_key) {
  auto &props = get_type_props<::qi::JointCmd>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::qi::JointCmd& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.position()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.velocity()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.kp()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.kd()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.torque()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::qi::JointCmd& instance, bool as_key) {
  auto &props = get_type_props<::qi::JointCmd>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_JOINTCMD_HPP
